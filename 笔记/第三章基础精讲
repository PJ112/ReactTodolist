3-1 使用React编写TOdolist功能
    JSX语法要求所有的元素都被包含在一个大的元素之中
    Fragment 可以解决上诉问题

3-2 React中的响应式设计思想和事件绑定
      强调不操作DOM 而是对数据的操作
      最先执行的函数
          constructor (props) {
            super(props);
            this.state = {   //组件的状态
                inputValue: '',
                list: []
            }
          }
          input框中的value={this.state.inputValue}
          响应式的页面
          react数据绑定
          onChange={this.handleInputChange}
          handleInputChange这个方法是在render下面进行书写
          handleInputChange (e) {
            //console.log(e)
            console.log(e.target.value)
          }


         学习了这一章即了解vue和react绑定数据的不同
         vue直接在input框中通过：进行数据绑定
         react是使用
         constructor （props） {
            super(props);
            this.state = {
                inputValue: "",
                list: []
            }
         }
         input框子中
         value={this.state.inputValue}
         onChange={this.handleInputChange.bind(this)}  onChange  C必须大写
         this必须进行数据的绑定

          handleChange (e) {
                this.setState ({
                    inputValue: e.target.value
                })
             }



3-3 实现TodoList新增删除功能
      按钮绑定事件 React绑定事件名称一定要大写onClick 并且要对this进行绑定
      不然this指向会有问题的

       li的循环
       <ul>
        {
            this.state.list.map((item, index) => {
                return <li>{item}</li>
            })
        }
       </ul>

       es6数组 ...数组展开运算符

       将input框绑定的inputValue的值放到list
       handleClick () {
        this.setState ({
           this.state.list: [...this.state.list, this.state.inputValue]
        })
       }


    实现数据的删除
    绑定删除函数
    onClick={this.delClick.bind(this, index)}
    第一种方法
    delClick (index) {
        vue实现数据的修改 需要使用this.setState ({})
        const list = [...this.state.list]
        list.splice(index, 1)
        this.setState ({
            list: list
        })
    }

    第二种方法 确实可以实现 但是这种方法是错误的
    this.state.list.splice(index, 1)
    this.setState ({
        list: this.state.list

    })
    为什么说这种方法是错误的呢
    React中有immutable的要求 state不允许我们做任何的改变
    而是拷贝一个list对list进行变更 这样对后面的性能优化存在一定的问题


3-4  JSX语法细节补充
    如何在JSX语法中进行注释
    Fragment大写 一般是组件 小写是html代码
    所以说Fragment是一个组件
    注释的写法
    第一种
        {/*下面是一个input*/}
    第二种
        {
            //下面是一个input框
        }
    {}是js的语法

    css的编写
    使用class对类名使用的class可能会产生混淆
    className=""
    当我们在input框中输入
    <h1>hello</h1>
    直接输出原样式
    对h1不进行转义
    在li标签中
    JSX语法
    dangerouslySetInnerHTML={{__html: item}}
    使用上诉方式即可解决原样式输出的问题
    <label>输入内容</label>
    在HTML中label的作用是
    点击label中的文字，光标会到input框之中
    input框中
    id="inserAlert"
    label框中
    for="inserAlert"
    这样在页面展示的时候是没有任何问题的
    但是会在console中报错误，因为for在React中会认为是循环，即会报错
    解决方法
    将for="inserAlert" 修改为 htmlFor="inserAlert"


3-5 拆分组价与组件之间的传值
    将todolist组件化
    header  content
    组件的定义的写法
    import React， {Component} from 'react';
    class TodoItem extends Component{
        render () {
            return <div>item</div>
        }
    }
    export default TodoItem;

    外部组件的引入
    import TodoItem from './TodoItem';
    <TodoItem/>
    所有的元素 都必须在同一个div内容 必须用div包裹起来
    父组件向子组件传值(实现添加功能)
        1、通过属性来传递 content={item}
        2、子组件如何使用传递过来的数据{this.props.content}
    子组件向父组件传递数据(实现删除功能)
        1、对TodoItem进行数据的绑定 onClick={this.handleClick}
               handleClick (){
                 //alert(1);
               }
        2、index属性的传递
            index的获取
       3、子组件如何调用父亲的方法
            this的绑定最好放在constructor中写 节约性能
            方法的调用
                父组件的方法传递
                hadnleItemDelete={this.handleItemDelete.bind(this)}
                子组件调用父组件传递过来的方法
                this.props.handleItemDelete(this.props.index)

3-6 Todolist代码优化
    {this.props.content}可以写成
    const { content } = { this.props }
    后面需要调用可以直接写  {content}

    一般我们都是先引入组件再引入样式
    this指向的绑定 最好都是在constructor中进行绑定
    循环使用的this.map进行修改
    将this.map中的函数写在getTodo之中
    getTodo(){
       return this.state.list.map((item, index) => {...})
    }
   然后在ul之中直接写{this.getTodo()}
   这样让jsx中代码比较少 方便数据的处理
     handleChange (e) {
           this.setState ({
               inputValue: e.target.value
           })
        }
    这样写也不是也别好 为了进行代码的维护 可以采用如下方式
     handleChange (e) {
           this.setState(() => {
                return {
                    inputValue: e.target.value
                }
           })
        }

   可以将return省略写
     handleChange (e) {
               this.setState(() => ({
                 inputValue: e.target.value
               }))
            }
    setState是异步的函数
    如果直接按照上面的方法就会报错 可以采用如下方法解决
    const value = e.target.value
    对value值进行一下保存
    inputValue: value
    使用这样的方式就可以解决这些问题
    当把一个对象变成函数的时候 把值存在外层 然后使用这个变量就ok了
    setState((prevState)会接收一个prevState参数
   list: [...this.state.list, this.state.inputValue]
   就需改写成
   list: [...prevState.list, prevState.inputValue]
   用index值作为key值是一个很不负责的行为 具体原因在讲虚拟DOM的时候会说到


3-7 围绕React衍生出的思考
    声名式开发 React 面向数据来编程 节约大量的DOM操作的代码
        可以与其他框架并存 组件化 组件一般首字母大写 父组件通过属性的方式传值
        子组件向父组件传值 通过调用父组件传过来的方法 进而进行对父组件的操作
        React单向数据流 父组件向子组件传值 可以传递这个值 但是不能修改这个值
         单向数据流还是有好处的 比如说list被多个组件共用 当某一个组件删除了list
         那整个数据就乱套了
        但是我们还是想能让子组件能修改父组件的值 怎么办呢？ 使用调用方法的方式
        这样其实还是父组件对自己数据的改变
        这样也就方便多了
        React视图层框架
        非父子组件传值还是很复杂的
        函数式编程
           React中基本都是一个个函数
           constructor render 各种方法
        前端自动化测试
           给前端自动化测试带来了极大的方法 只要判断函数的输入输出是否正确
    直接操作DOM 命令式编程

